@page "/chat"
@using VanRental.Web.Models
@using VanRental.Web.Services.AI
@using Microsoft.Extensions.Http
@inject IHttpClientFactory _httpClientFactory
@inject IDeepSeekService DeepSeekService
@inject IJSRuntime JSRuntime

@using System.Collections.Generic

<h3>Assistente Virtuale VanRental</h3>

<div class="chat-container">
    @foreach (var message in messages)
    {
        <div class="message @message.CssClass">
            @message.Text
        </div>
    }

    <input @bind="userMessage"
           @bind:event="oninput"
           placeholder="Scrivi qui..."
           @onkeypress="HandleKeyPress" />
    <button @onclick="SendMessage" disabled="@isSending">
        @(isSending ? "Invio..." : "Invia")
    </button>
</div>

@code {


    private string userMessage = "";
    private bool isSending = false;
    private List<ChatMessage> messages = new();
    private ElementReference inputElement = default; 

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("focusInput", inputElement);
        }
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SendMessage();
        }
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(userMessage)) return;

        isSending = true;
        var userInput = userMessage;
        userMessage = "";
        StateHasChanged();

        try
        {
            messages.Add(new ChatMessage
                {
                    Text = userInput,
                    CssClass = "user-message"
                });

            if (userInput.Contains("furgon") || userInput.Contains("disponibil"))
            {
                await HandleVanRequest();
            }
            else
            {
                await HandleAiRequest(userInput);
            }
        }
        catch (Exception ex)
        {
            messages.Add(new ChatMessage
                {
                    Text = $"Errore: {ex.Message}",
                    CssClass = "error-message"
                });
        }
        finally
        {
            isSending = false;
            await ScrollToBottom();
        }
    }

    private async Task HandleVanRequest()
    {
        var client = _httpClientFactory.CreateClient("VanRentalAPI");
        var furgoni = await client.GetFromJsonAsync<List<Van>>("api/Vans");

        messages.Add(new ChatMessage
            {
                Text = furgoni?.Count > 0
                    ? $"Furgoni disponibili: {furgoni.Count}"
                    : "Nessun furgone disponibile",
                CssClass = "bot-message"
            });
    }

    private async Task HandleAiRequest(string userInput)
    {
        var response = await DeepSeekService.GetResponse(userInput);
        messages.Add(new ChatMessage
            {
                Text = response,
                CssClass = "bot-message"
            });
    }

    private async Task ScrollToBottom()
    {
        await JSRuntime.InvokeVoidAsync("scrollChatToBottom");
    }

    private class ChatMessage
    {
        public string Text { get; set; } = "";
        public string CssClass { get; set; } = "";
    }
}